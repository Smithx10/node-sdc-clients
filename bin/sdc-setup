#!/usr/bin/env node
// -*- mode: js -*-
// Copyright 2011 Joyent, Inc.  All rights reserved.

var fs = require('fs');
var path = require('path');
var url = require('url');

var nopt = require('nopt');
var restify = require('restify');

var common = require('../lib/cli_common');
var CloudAPI = require('../lib/index').CloudAPI;



///--- Globals

var Options = {
  "debug": Boolean,
  "help": Boolean,
  "url": url
};

var ShortOptions = {
  "d": ["--debug"],
  "h": ["--help"],
  "u": ["--url"]
};

var buffer = '';
var log = restify.log;
var stdio = process.binding('stdio');



///--- Internal Functions

// Totally ripped off from npm. Thanks isaacs@!

function read(def, cb) {
  var stdin = process.openStdin();
  var val = '';
  stdin.resume();
  stdin.setEncoding('utf8');
  stdin.on('error', cb)
  stdin.on('data', function D (chunk) {
    val += buffer + chunk;
    buffer = '';
    val = val.replace(/\r/g, '');
    if (val.indexOf('\n') !== -1) {
      if (val !== '\n')
        val = val.replace(/^\n+/, '');
      buffer = val.substr(val.indexOf('\n'));
      val = val.substr(0, val.indexOf('\n'));
      stdin.pause();
      stdin.removeListener('data', D);
      stdin.removeListener('error', cb);
      val = val.trim() || def;
      cb(null, val);
    }
  });
}


function silentRead(def, cb) {
  var stdin = process.openStdin();
  var val = '';
  stdio.setRawMode(true);
  stdin.resume();
  stdin.on('error', cb)
  stdin.on('data', function D (c) {
    c = '' + c
    switch (c) {
    case '\n':
    case '\r':
    case '\r\n':
    case '\u0004':
      stdio.setRawMode(false);
      stdin.removeListener('data', D);
      stdin.removeListener('error', cb);
      val = val.trim() || def;
      process.stdout.write('\n');
      process.stdout.flush();
      stdin.pause();
      return cb(null, val);
    case '\u0003':
    case '\0':
      return cb('cancelled');
      break;
    default:
      val += buffer + c;
      buffer = '';
      break;
    }
  });
}


function prompt(p, def, silent, cb) {
  if (!cb) cb = silent, silent = false;
  if (!cb) cb = def, def = undefined;
  if (def) p += '('+ (silent ? '<hidden>' : def)+') ';
  var r = (silent ? silentRead : read).bind(null, def, cb);
  if (!process.stdout.write(p)) {
    process.stdout.on('drain', function D () {
      process.stdout.removeListener('drain', D);
      r()
    });
  } else {
    r();
  }
}



///--- Mainline

var parsed = nopt(Options, ShortOptions, process.argv, 2);
if (parsed.help)
  common.usage(common.buildUsageString(Options));
if (parsed.debug)
  restify.log.level(restify.LogLevel.Trace);


prompt('Username (login): ', process.env.USER, function(err, username) {
  if (err) {
    console.error('Unable to read username: ' + err.message);
    process.exit(5);
  }

  return prompt('Password: ', null, true, function(err, password) {
    if (err) {
      console.error('Unable to read password: ' + err.message);
      process.exit(5);
    }

    if (!password || !password.length) {
      console.error('You did not enter a password.');
      process.exit(6);
    }

    var DEF_KEY = process.env.HOME + '/.ssh/id_rsa.pub';
    return prompt('SSH public key: ', DEF_KEY, function(err, file) {
      if (err) {
        console.error('Unable to read key: ' + err.message);
        process.exit(5);
      }
      log.debug('setup: user=%s, pass=%s, key=%s', username, password, file);
      var key = common.loadKey(file);
      var _url = parsed.url || 'https://10.99.99.15';
      var client = new CloudAPI({
        url: _url,
        account: username,
        noCache: true,
        username: username,
        password: password
      });

      // So that SSH agent support automagically works (if using the CLI),
      // pick the name to be the same as what SSH Agent will pass in the
      // comment field (well, the file name, not the full path).
      var keyName = file.split('/');
      var opts = {
        name: keyName[keyName.length - 1].split('.')[0],
        key: key
      }
      client.createKey(opts, function(err, key) {
        if (err) {
          if (err.httpCode >= 500) {
            if (err.details && err.details.body) {
              try {
                console.error(JSON.parse(err.details.body).message);
              } catch(e) {
                console.error(err.message);
              }
            }
          } else {
            console.error(err.message);
          }
          process.exit(3);
        }

        console.log('\n\nIf you set these environment variables, your life will be easier:');
        console.log('export SDC_CLI_URL=' + _url);
        console.log('export SDC_CLI_ACCOUNT=' + username);
        console.log('export SDC_CLI_KEY_ID=' + key.name);
      });
    });
  });
});

